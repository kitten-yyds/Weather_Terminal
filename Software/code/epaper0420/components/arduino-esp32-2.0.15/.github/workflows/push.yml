name: ESP32 Arduino CI

on:
  workflow_dispatch:
  push:
    branches:
    - master
    - release/*
  pull_request:

concurrency:
  group: build-${{github.event.pull_request.number || github.ref}}
  cancel-in-progress: true

jobs:

  cmake-check:
    name: Check cmake file
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - run: bash ./.github/scripts/check-cmakelists.sh

  # Ubuntu
  build-arduino-linux:
    name: Arduino ${{ matrix.chunk }} on ubuntu-latest
    runs-on: ubuntu-latest
    strategy:
      matrix:
        chunk: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]

    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    - name: Cache tools
      id: cache-linux
      uses: actions/cache@v3
      with:
        path: |
          ./tools/dist
          ~/arduino_ide
        key: ${{ runner.os }}-${{ hashFiles('package/package_esp32_index.template.json',
                                            'tools/get.py',
                                            '.github/scripts/install-arduino-ide.sh') }}
    - name: Build Sketches
      run: bash ./.github/scripts/on-push.sh ${{ matrix.chunk }} 15

  # Windows and MacOS
  build-arduino-win-mac:
    name: Arduino on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macOS-latest]

    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    - name: Build Sketches
      run: bash ./.github/scripts/on-push.sh

  # PlatformIO on Windows, Ubuntu and Mac
  build-platformio:
    name: PlatformIO on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]

    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    - name: Build Sketches
      run: bash ./.github/scripts/on-push.sh 1 1 #equal and non-zero to trigger PIO

  build-esp-idf-component:
    name: Build with ESP-IDF ${{ matrix.idf_ver }} for ${{ matrix.idf_target }}
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        # The version names here correspond to the versions of espressif/idf Docker image.
        # See https://hub.docker.com/r/espressif/idf/tags and
        # https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-guides/tools/idf-docker-image.html
        # for details.
        idf_ver: ["release-v4.4"]
        idf_target: ["esp32", "esp32s2", "esp32s3", "esp32c3"]
    container: espressif/idf:${{ matrix.idf_ver }}
    steps:
      - name: Check out arduino-esp32 as a component
        uses: actions/checkout@v3
        with:
          submodules: recursive
          path: components/arduino-esp32
      - name: Build
        env:
          IDF_TARGET: ${{ matrix.idf_target }}
        shell: bash
        run: |
          . ${IDF_PATH}/export.sh
          idf.py create-project test
          echo CONFIG_FREERTOS_HZ=1000 > test/sdkconfig.defaults
          idf.py -C test -DEXTRA_COMPONENT_DIRS=$PWD/components build
